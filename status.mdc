---
description: 
globs: 
alwaysApply: false
---
 # Rainbow Three Jay's - Project Status

## Current Development Status

The game is currently in the early stages of development, focusing on refining core mechanics like movement, leaning, vaulting, and shooting (Phase 3/4). Significant refactoring has been done to improve code structure and maintainability.

### Implemented Features

#### Core Systems
- **Rendering**: Basic Three.js scene setup.
- **Player Controller**: First-person movement (WASD), physics integration (gravity).
- **Collision Detection**: Centralized system preventing movement through obstacles.
- **Leaning System**: Q/E keys toggle left/right lean with positional offset and camera roll.
- **Vaulting System**: Centralized system handling vault detection (based on object type/height), visual prompts, and vault animation.
- **Shooting Mechanics**: Basic raycast shooting from camera center.
- **Input Manager**: Centralized handling of keyboard and mouse input actions.
- **UI Manager**: Centralized management of HUD elements (crosshair, prompts, instructions).
- **Networking**: Basic player synchronization (position, rotation, lean) via Socket.IO. Hit registration and health updates handled server-side (excluding dummies/targets).

#### Game Environment
- **Game Map**: Simple test environment with:
  - Target shooting range (moving targets).
  - Vaultable obstacles (Mini Tables, Tables, Half Walls).
  - Dummy player models for practice.
- **Vaultable Objects**: Standardized obstacles with defined heights and `vaultable` type in `userData`.
  - Mini Tables (0.5 height) - Blue
  - Tables (0.8 height) - Green
  - Half Walls (1.2 height) - Red
- **Visual Elements**: Crosshair, vault prompt, hit markers, hit overlay, instructions.

#### Object Models
- **PlayerModel**: Consistent base model (capsule body, sphere head) used for local player, other players, and dummies. Includes team coloring and health bar.
- **DummyModel**: Target dummy extending `PlayerModel` with specific coloring and behavior.
- **TargetModel**: Moving targets with hit effects and respawn functionality.
- **MiniTableModel**: Low vaultable obstacles (height 0.5).
- **TableModel**: Medium vaultable obstacles (height 0.8).
- **HalfWallModel**: Tall vaultable obstacles (height 1.2).

### Recent Improvements
- **Code Centralization**:
    - Vaulting logic moved to `VaultingSystem.js`.
    - Input handling moved to `InputManager.js`.
    - UI element management moved to `UIManager.js`.
- **Consistency**: `OtherPlayers` now uses `PlayerModel` for visual consistency with the local player and dummies.
- **Camera Alignment**: Player camera height adjusted to match the visual head position within the `PlayerModel`.
- **Player Sizing**: Player collision height and visual model adjusted (currently 1.6 units).
- **Bug Fixes**:
    - Corrected camera rotation issues during leaning.
    - Improved vault initiation responsiveness (removed throttle delay).
- **Refactoring**: Removed direct DOM manipulation from components like `PlayerController`, `VaultingSystem`, `WeaponSystem`.

### Current Focus Areas
- Ensuring stability and correctness of core mechanics (movement, collision, lean, vault, shoot).
- Refining interactions between different systems (PlayerController, VaultingSystem, CollisionDetection, InputManager, UIManager).
- Preparing for more robust networking implementation.

### Next Steps
- Complete basic shooting mechanics refinement (Phase 4).
- Implement server-side validation and more robust state synchronization (Phase 5).
- Design more complex map layouts (Phase 6).
- Implement basic team mechanics (Phase 7).

## Technical Highlights

### Collision Detection System
Uses raycasting to check for collisions at different heights, preventing movement through obstacles based on player dimensions and step height. Integrated with the `PlayerController`.

### Vaulting System
Detects vaultable objects (`userData.type === "vaultable"`) within a specific height range using raycasting. Manages the vault animation (Bezier curve) and state transitions. Communicates with `UIManager` for visual prompts.

### Input & UI Managers
- **InputManager**: Abstracts raw browser input events into game-specific actions (e.g., `moveForward`, `shoot`, `vault`), queried by other systems.
- **UIManager**: Manages the creation, visibility, and state of all DOM-based UI elements, providing a single interface for components to update the HUD.

### Component-Based Structure
Utilizes separate classes for core functionalities (PlayerController, WeaponSystem, VaultingSystem, CollisionDetection) and managers (InputManager, UIManager), promoting modularity. `PlayerModel` serves as a reusable visual and data component for player-like entities.
